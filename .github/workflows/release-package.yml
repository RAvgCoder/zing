name: Build and Release macOS Package

on:
  release:
    types: [created]

# Add permissions block to grant write access to releases
permissions:
  contents: write

jobs:
  build-macos:
    runs-on: macos-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        
      - name: Install create-dmg
        run: brew install create-dmg
        
      - name: Build Release Binary
        run: cargo build --release
        
      - name: Create App Bundle
        run: |
          mkdir -p Zing.app/Contents/{MacOS,Resources}
          cp target/release/zing Zing.app/Contents/MacOS/
          cp assets/icon.png Zing.app/Contents/Resources/
          
          # Create comprehensive Info.plist
          cat > Zing.app/Contents/Info.plist << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>CFBundleExecutable</key>
              <string>zing</string>
              <key>CFBundleIconFile</key>
              <string>icon.png</string>
              <key>CFBundleIdentifier</key>
              <string>com.sukeesh.zing</string>
              <key>CFBundleInfoDictionaryVersion</key>
              <string>6.0</string>
              <key>CFBundleName</key>
              <string>Zing</string>
              <key>CFBundlePackageType</key>
              <string>APPL</string>
              <key>CFBundleShortVersionString</key>
              <string>${{ github.event.release.tag_name }}</string>
              <key>CFBundleVersion</key>
              <string>${{ github.event.release.tag_name }}</string>
              <key>LSMinimumSystemVersion</key>
              <string>10.13</string>
              <key>NSHighResolutionCapable</key>
              <true/>
              <key>NSPrincipalClass</key>
              <string>NSApplication</string>
              <key>LSApplicationCategoryType</key>
              <string>public.app-category.developer-tools</string>
          </dict>
          </plist>
          EOF
      
      # Set up keychain and import certificates
      - name: Set up keychain
        env:
          KEYCHAIN_PASSWORD: ${{ github.run_id }}
        run: |
          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security set-keychain-settings -t 3600 -u build.keychain
      
      # Import Developer ID certificate
      - name: Import Developer ID Certificate
        env:
          CERTIFICATE_BASE64: ${{ secrets.APPLE_DEVELOPER_CERTIFICATE_BASE64 }}
          CERTIFICATE_PASSWORD: ${{ secrets.APPLE_DEVELOPER_CERTIFICATE_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ github.run_id }}
        run: |
          echo "$CERTIFICATE_BASE64" | base64 --decode > certificate.p12
          security import certificate.p12 -k build.keychain -P "$CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple: -s -k "$KEYCHAIN_PASSWORD" build.keychain
          rm certificate.p12
      
      # Sign the application
      - name: Sign the application
        env:
          DEVELOPER_ID: ${{ secrets.APPLE_DEVELOPER_ID }}
        run: |
          # Create entitlements file
          cat > entitlements.plist << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>com.apple.security.cs.allow-jit</key>
              <true/>
              <key>com.apple.security.cs.allow-unsigned-executable-memory</key>
              <true/>
              <key>com.apple.security.cs.disable-library-validation</key>
              <true/>
          </dict>
          </plist>
          EOF
          
          # Sign the app
          /usr/bin/codesign --force --options runtime --entitlements entitlements.plist --sign "$DEVELOPER_ID" Zing.app --deep --verbose
      
      # Notarize the application with detailed error reporting
      - name: Notarize the application
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_PASSWORD: ${{ secrets.APPLE_APP_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          # Create a ZIP for notarization
          ditto -c -k --keepParent Zing.app Zing.zip
          
          # Submit for notarization and capture the submission ID
          echo "Submitting app for notarization..."
          SUBMISSION_OUTPUT=$(xcrun notarytool submit Zing.zip --apple-id "$APPLE_ID" --password "$APPLE_APP_PASSWORD" --team-id "$APPLE_TEAM_ID" --wait)
          echo "Submission output: $SUBMISSION_OUTPUT"
          
          # Extract submission ID using grep and awk
          SUBMISSION_ID=$(echo "$SUBMISSION_OUTPUT" | grep "id:" | awk '{print $2}')
          echo "Extracted Submission ID: $SUBMISSION_ID"
          
          if [ -n "$SUBMISSION_ID" ]; then
            # Get detailed logs about the failure
            echo "Getting detailed notarization log..."
            xcrun notarytool log "$SUBMISSION_ID" --apple-id "$APPLE_ID" --password "$APPLE_APP_PASSWORD" --team-id "$APPLE_TEAM_ID" notarization.log
            
            echo "=== NOTARIZATION LOG ==="
            cat notarization.log
            echo "========================"
            
            # Check status
            STATUS_OUTPUT=$(xcrun notarytool info "$SUBMISSION_ID" --apple-id "$APPLE_ID" --password "$APPLE_APP_PASSWORD" --team-id "$APPLE_TEAM_ID")
            echo "Status output: $STATUS_OUTPUT"
            
            if echo "$STATUS_OUTPUT" | grep -q "status: Accepted"; then
              echo "Notarization successful!"
              xcrun stapler staple Zing.app
            else
              echo "Notarization failed. See log above for details."
              exit 1
            fi
          else
            echo "Failed to get submission ID"
            exit 1
          fi
      
      # Create DMG with signed app
      - name: Create DMG
        run: |
          create-dmg \
            --volname "Zing" \
            --volicon "assets/icon.png" \
            --window-pos 200 120 \
            --window-size 800 400 \
            --icon-size 100 \
            --icon "Zing.app" 200 190 \
            --hide-extension "Zing.app" \
            --app-drop-link 600 185 \
            "Zing.dmg" \
            "Zing.app"
      
      # Sign the DMG
      - name: Sign the DMG
        env:
          DEVELOPER_ID: ${{ secrets.APPLE_DEVELOPER_ID }}
        run: |
          /usr/bin/codesign --force --sign "$DEVELOPER_ID" Zing.dmg --verbose
            
      - name: Upload App Bundle
        uses: actions/upload-artifact@v4
        with:
          name: Zing.app
          path: Zing.app
          
      - name: Upload DMG
        uses: actions/upload-artifact@v4
        with:
          name: Zing.dmg
          path: Zing.dmg
          
      - name: Attach to Release
        uses: softprops/action-gh-release@v1
        with:
          files: Zing.dmg
