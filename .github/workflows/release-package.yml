name: Build and Release macOS Package

on:
  release:
    types: [created]

# Add permissions block to grant write access to releases
permissions:
  contents: write

jobs:
  build-macos:
    runs-on: macos-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        
      - name: Install create-dmg
        run: brew install create-dmg
        
      - name: Build Release Binary
        run: cargo build --release
        
      - name: Create App Bundle
        run: |
          mkdir -p Zing.app/Contents/{MacOS,Resources}
          cp target/release/zing Zing.app/Contents/MacOS/
          cp assets/icon.png Zing.app/Contents/Resources/
          
          # Create comprehensive Info.plist
          cat > Zing.app/Contents/Info.plist << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>CFBundleExecutable</key>
              <string>zing</string>
              <key>CFBundleIconFile</key>
              <string>icon.png</string>
              <key>CFBundleIdentifier</key>
              <string>com.sukeesh.zing</string>
              <key>CFBundleInfoDictionaryVersion</key>
              <string>6.0</string>
              <key>CFBundleName</key>
              <string>Zing</string>
              <key>CFBundlePackageType</key>
              <string>APPL</string>
              <key>CFBundleShortVersionString</key>
              <string>${{ github.event.release.tag_name }}</string>
              <key>CFBundleVersion</key>
              <string>${{ github.event.release.tag_name }}</string>
              <key>LSMinimumSystemVersion</key>
              <string>10.13</string>
              <key>NSHighResolutionCapable</key>
              <true/>
              <key>NSPrincipalClass</key>
              <string>NSApplication</string>
              <key>LSApplicationCategoryType</key>
              <string>public.app-category.developer-tools</string>
          </dict>
          </plist>
          EOF
      
      # Set up keychain and import certificates
      - name: Set up keychain
        env:
          KEYCHAIN_PASSWORD: ${{ github.run_id }}
        run: |
          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security set-keychain-settings -t 3600 -u build.keychain
      
      # Import Developer ID certificate
      - name: Import Developer ID Certificate
        env:
          CERTIFICATE_BASE64: ${{ secrets.APPLE_DEVELOPER_CERTIFICATE_BASE64 }}
          CERTIFICATE_PASSWORD: ${{ secrets.APPLE_DEVELOPER_CERTIFICATE_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ github.run_id }}
        run: |
          echo "$CERTIFICATE_BASE64" | base64 --decode > certificate.p12
          security import certificate.p12 -k build.keychain -P "$CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple: -s -k "$KEYCHAIN_PASSWORD" build.keychain
          rm certificate.p12
      
      # Sign the application with enhanced entitlements
      - name: Sign the application
        env:
          DEVELOPER_ID: ${{ secrets.APPLE_DEVELOPER_ID }}
        run: |
          # Create enhanced entitlements file
          cat > entitlements.plist << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>com.apple.security.cs.allow-jit</key>
              <true/>
              <key>com.apple.security.cs.allow-unsigned-executable-memory</key>
              <true/>
              <key>com.apple.security.cs.disable-library-validation</key>
              <true/>
              <key>com.apple.security.files.user-selected.read-only</key>
              <true/>
              <key>com.apple.security.files.user-selected.read-write</key>
              <true/>
              <key>com.apple.security.network.client</key>
              <true/>
          </dict>
          </plist>
          EOF
          
          # Make sure executable has proper permissions
          chmod +x Zing.app/Contents/MacOS/zing
          
          # Sign the app with hardened runtime
          /usr/bin/codesign --force --options runtime --entitlements entitlements.plist --sign "$DEVELOPER_ID" Zing.app --deep --verbose
          
          # Verify signing
          codesign -vvv --deep --strict Zing.app
      
      # Notarize the application with fixed script
      - name: Notarize the application
        id: notarize
        continue-on-error: true
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_PASSWORD: ${{ secrets.APPLE_APP_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          # Create a ZIP for notarization
          ditto -c -k --keepParent Zing.app Zing.zip
          
          # Submit for notarization with JSON output for reliable parsing
          echo "Submitting app for notarization..."
          SUBMISSION_JSON=$(xcrun notarytool submit Zing.zip --apple-id "$APPLE_ID" --password "$APPLE_APP_PASSWORD" --team-id "$APPLE_TEAM_ID" --wait --output-format json)
          echo "Submission JSON: $SUBMISSION_JSON"
          
          # Extract submission ID properly using grep and cut
          SUBMISSION_ID=$(echo "$SUBMISSION_JSON" | grep -o '"id" *: *"[^"]*"' | cut -d'"' -f4)
          echo "Extracted Submission ID: $SUBMISSION_ID"
          
          if [ -n "$SUBMISSION_ID" ]; then
            # Get detailed logs about the failure
            echo "Getting detailed notarization log..."
            xcrun notarytool log "$SUBMISSION_ID" --apple-id "$APPLE_ID" --password "$APPLE_APP_PASSWORD" --team-id "$APPLE_TEAM_ID" notarization.log || true
            
            if [ -f notarization.log ]; then
              echo "=== NOTARIZATION LOG ==="
              cat notarization.log
              echo "========================"
            else
              echo "Failed to get notarization log, trying to get info instead"
            fi
            
            # Check status
            STATUS_JSON=$(xcrun notarytool info "$SUBMISSION_ID" --apple-id "$APPLE_ID" --password "$APPLE_APP_PASSWORD" --team-id "$APPLE_TEAM_ID" --output-format json)
            echo "Status JSON: $STATUS_JSON"
            
            STATUS=$(echo "$STATUS_JSON" | grep -o '"status" *: *"[^"]*"' | cut -d'"' -f4)
            echo "Extracted Status: $STATUS"
            
            if [ "$STATUS" = "Accepted" ]; then
              echo "Notarization successful!"
              xcrun stapler staple Zing.app
              echo "::set-output name=notarized::true"
            else
              echo "Notarization failed with status: $STATUS"
              echo "::set-output name=notarized::false"
            fi
          else
            echo "Failed to get submission ID"
            echo "::set-output name=notarized::false"
          fi
      
      # Create instructions file for unsigned app
      - name: Create instructions for unsigned app
        if: steps.notarize.outputs.notarized != 'true'
        run: |
          # Add README with instructions for users
          cat > "HOW_TO_OPEN_UNSIGNED_APP.txt" << EOF
          To open Zing on macOS:
          
          Since this app is signed but not notarized, you may see security warnings.
          
          To open the app:
          1. Right-click (or Control-click) on the app
          2. Select "Open" from the context menu
          3. Click "Open" in the dialog that appears
          
          This only needs to be done once. After that, you can open the app normally.
          
          Alternatively, you can run this command in Terminal to disable Gatekeeper for this app:
          xattr -d com.apple.quarantine /Applications/Zing.app
          EOF
      
      # Create DMG with signed app (always runs)
      - name: Create DMG
        run: |
          # Create a temporary directory for DMG contents
          mkdir -p dmg_contents
          cp -r Zing.app dmg_contents/
          
          # Include instructions if notarization failed
          if [ -f "HOW_TO_OPEN_UNSIGNED_APP.txt" ]; then
            cp HOW_TO_OPEN_UNSIGNED_APP.txt dmg_contents/
          fi
          
          # Create the DMG
          create-dmg \
            --volname "Zing" \
            --volicon "assets/icon.png" \
            --window-pos 200 120 \
            --window-size 800 400 \
            --icon-size 100 \
            --icon "Zing.app" 200 190 \
            --hide-extension "Zing.app" \
            --app-drop-link 600 185 \
            "Zing.dmg" \
            dmg_contents
      
      # Sign the DMG
      - name: Sign the DMG
        env:
          DEVELOPER_ID: ${{ secrets.APPLE_DEVELOPER_ID }}
        run: |
          /usr/bin/codesign --force --sign "$DEVELOPER_ID" Zing.dmg --verbose
            
      - name: Upload App Bundle
        uses: actions/upload-artifact@v4
        with:
          name: Zing.app
          path: Zing.app
          
      - name: Upload DMG
        uses: actions/upload-artifact@v4
        with:
          name: Zing.dmg
          path: Zing.dmg
          
      - name: Attach to Release
        uses: softprops/action-gh-release@v1
        with:
          files: Zing.dmg
