name: Build and Release macOS Package

on:
  release:
    types: [created]

# Add permissions block to grant write access to releases
permissions:
  contents: write

jobs:
  build-macos:
    runs-on: macos-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        
      - name: Install create-dmg and imagemagick
        run: brew install create-dmg imagemagick
        
      - name: Build Release Binary
        run: cargo build --release
        
      # Create proper macOS icon set
      - name: Create Icon Set
        run: |
          # Create temporary directory for icon processing
          mkdir -p iconset.iconset
          
          # Convert PNG to ICNS format with multiple resolutions
          # Assuming assets/icon.png is at least 1024x1024 pixels
          for size in 16 32 64 128 256 512 1024; do
            # Standard resolution
            sips -z $size $size assets/icon.png --out iconset.iconset/icon_${size}x${size}.png
            
            # High resolution (retina)
            if [ $size -lt 512 ]; then
              sips -z $((size*2)) $((size*2)) assets/icon.png --out iconset.iconset/icon_${size}x${size}@2x.png
            fi
          done
          
          # Create .icns file from the iconset
          iconutil -c icns iconset.iconset -o AppIcon.icns
        
      - name: Create App Bundle
        run: |
          mkdir -p Zing.app/Contents/{MacOS,Resources}
          cp target/release/zing Zing.app/Contents/MacOS/
          cp AppIcon.icns Zing.app/Contents/Resources/
          
          # Create comprehensive Info.plist with proper icon reference
          cat > Zing.app/Contents/Info.plist << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>CFBundleExecutable</key>
              <string>zing</string>
              <key>CFBundleIconFile</key>
              <string>AppIcon</string>
              <key>CFBundleIdentifier</key>
              <string>com.sukeesh.zing</string>
              <key>CFBundleInfoDictionaryVersion</key>
              <string>6.0</string>
              <key>CFBundleName</key>
              <string>Zing</string>
              <key>CFBundlePackageType</key>
              <string>APPL</string>
              <key>CFBundleShortVersionString</key>
              <string>${{ github.event.release.tag_name }}</string>
              <key>CFBundleVersion</key>
              <string>${{ github.event.release.tag_name }}</string>
              <key>LSMinimumSystemVersion</key>
              <string>10.13</string>
              <key>NSHighResolutionCapable</key>
              <true/>
              <key>NSPrincipalClass</key>
              <string>NSApplication</string>
              <key>LSApplicationCategoryType</key>
              <string>public.app-category.developer-tools</string>
              <key>CFBundleDocumentTypes</key>
              <array>
                  <dict>
                      <key>CFBundleTypeExtensions</key>
                      <array>
                          <string>txt</string>
                          <string>md</string>
                          <string>*</string>
                      </array>
                      <key>CFBundleTypeName</key>
                      <string>Text Document</string>
                      <key>CFBundleTypeRole</key>
                      <string>Editor</string>
                      <key>LSHandlerRank</key>
                      <string>Alternate</string>
                  </dict>
              </array>
          </dict>
          </plist>
          EOF
      
      # Set up keychain and import certificates
      - name: Set up keychain
        env:
          KEYCHAIN_PASSWORD: ${{ github.run_id }}
        run: |
          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security set-keychain-settings -t 3600 -u build.keychain
      
      # Import Developer ID certificate
      - name: Import Developer ID Certificate
        env:
          CERTIFICATE_BASE64: ${{ secrets.APPLE_DEVELOPER_CERTIFICATE_BASE64 }}
          CERTIFICATE_PASSWORD: ${{ secrets.APPLE_DEVELOPER_CERTIFICATE_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ github.run_id }}
        run: |
          echo "$CERTIFICATE_BASE64" | base64 --decode > certificate.p12
          security import certificate.p12 -k build.keychain -P "$CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple: -s -k "$KEYCHAIN_PASSWORD" build.keychain
          rm certificate.p12
      
      # Sign the application with enhanced entitlements
      - name: Sign the application
        env:
          DEVELOPER_ID: ${{ secrets.APPLE_DEVELOPER_ID }}
        run: |
          # Create enhanced entitlements file
          cat > entitlements.plist << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>com.apple.security.cs.allow-jit</key>
              <true/>
              <key>com.apple.security.cs.allow-unsigned-executable-memory</key>
              <true/>
              <key>com.apple.security.cs.disable-library-validation</key>
              <true/>
              <key>com.apple.security.files.user-selected.read-only</key>
              <true/>
              <key>com.apple.security.files.user-selected.read-write</key>
              <true/>
              <key>com.apple.security.network.client</key>
              <true/>
          </dict>
          </plist>
          EOF
          
          # Make sure executable has proper permissions
          chmod +x Zing.app/Contents/MacOS/zing
          
          # Sign the app with hardened runtime
          /usr/bin/codesign --force --options runtime --entitlements entitlements.plist --sign "$DEVELOPER_ID" Zing.app --deep --verbose
          
          # Verify signing
          codesign -vvv --deep --strict Zing.app
      
      # Notarize the application with fixed script
      - name: Notarize the application
        id: notarize
        continue-on-error: true
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_PASSWORD: ${{ secrets.APPLE_APP_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          # Create a ZIP for notarization
          ditto -c -k --keepParent Zing.app Zing.zip
          
          # Submit for notarization with JSON output for reliable parsing
          echo "Submitting app for notarization..."
          SUBMISSION_JSON=$(xcrun notarytool submit Zing.zip --apple-id "$APPLE_ID" --password "$APPLE_APP_PASSWORD" --team-id "$APPLE_TEAM_ID" --wait --output-format json)
          echo "Submission JSON: $SUBMISSION_JSON"
          
          # Extract submission ID properly using grep and cut
          SUBMISSION_ID=$(echo "$SUBMISSION_JSON" | grep -o '"id" *: *"[^"]*"' | cut -d'"' -f4)
          echo "Extracted Submission ID: $SUBMISSION_ID"
          
          if [ -n "$SUBMISSION_ID" ]; then
            # Get detailed logs about the failure
            echo "Getting detailed notarization log..."
            xcrun notarytool log "$SUBMISSION_ID" --apple-id "$APPLE_ID" --password "$APPLE_APP_PASSWORD" --team-id "$APPLE_TEAM_ID" notarization.log || true
            
            if [ -f notarization.log ]; then
              echo "=== NOTARIZATION LOG ==="
              cat notarization.log
              echo "========================"
            else
              echo "Failed to get notarization log, trying to get info instead"
            fi
            
            # Check status
            STATUS_JSON=$(xcrun notarytool info "$SUBMISSION_ID" --apple-id "$APPLE_ID" --password "$APPLE_APP_PASSWORD" --team-id "$APPLE_TEAM_ID" --output-format json)
            echo "Status JSON: $STATUS_JSON"
            
            STATUS=$(echo "$STATUS_JSON" | grep -o '"status" *: *"[^"]*"' | cut -d'"' -f4)
            echo "Extracted Status: $STATUS"
            
            if [ "$STATUS" = "Accepted" ]; then
              echo "Notarization successful!"
              xcrun stapler staple Zing.app
              echo "::set-output name=notarized::true"
            else
              echo "Notarization failed with status: $STATUS"
              echo "::set-output name=notarized::false"
            fi
          else
            echo "Failed to get submission ID"
            echo "::set-output name=notarized::false"
          fi
      
      # Create helper script to open the app
      - name: Create helper script
        run: |
          cat > "open-zing.command" << 'EOF'
          #!/bin/bash
          
          # Get the directory where this script is located
          DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
          
          # Path to the app
          APP_PATH="$DIR/Zing.app"
          
          # Remove quarantine attribute if present
          echo "Removing quarantine attribute from Zing.app..."
          xattr -d com.apple.quarantine "$APP_PATH" 2>/dev/null || true
          
          # Open the app
          echo "Opening Zing.app..."
          open "$APP_PATH"
          
          echo "Done! If Zing opened successfully, you can close this terminal window."
          EOF
          
          # Make the script executable
          chmod +x open-zing.command
      
      # Create detailed instructions file
      - name: Create detailed instructions
        run: |
          cat > "HOW_TO_OPEN_ZING.md" << 'EOF'
          # How to Open Zing on macOS
          
          Since Zing is signed but not notarized with Apple, macOS security features may prevent it from opening normally. Here are three ways to open it:
          
          ## Option 1: Use the Helper Script (Easiest)
          
          1. Double-click the `open-zing.command` file in this folder
          2. If prompted with a security warning, click "Open"
          3. The script will remove security restrictions and open Zing automatically
          
          ## Option 2: Right-Click Method
          
          1. In Finder, right-click (or Control-click) on `Zing.app`
          2. Select "Open" from the context menu
          3. Click "Open" in the security dialog that appears
          4. The app will now open and be remembered as safe
          
          ## Option 3: Security & Privacy Settings
          
          If the above methods don't work:
          
          1. Try to open the app normally (it will be blocked)
          2. Open System Preferences > Security & Privacy
          3. Look for a message about Zing being blocked
          4. Click "Open Anyway"
          
          ## Option 4: Terminal Command
          
          For advanced users:
          
          ```
          xattr -d com.apple.quarantine /path/to/Zing.app
          ```
          
          Replace `/path/to/Zing.app` with the actual path to where you installed Zing.
          
          ## Need Help?
          
          If you're still having trouble, please open an issue on GitHub.
          EOF
      
      # Create installation instructions
      - name: Create installation instructions
        run: |
          cat > "INSTALL.md" << 'EOF'
          # Installing Zing
          
          ## Installation
          
          1. Drag the Zing app to your Applications folder
          2. Use the included helper script to open it the first time
          
          ## First Run
          
          The first time you run Zing, macOS may show security warnings. This is normal for apps from independent developers.
          
          ## Troubleshooting
          
          If you see a broken icon in the Dock:
          
          1. Quit Zing if it's running
          2. Delete the app from your Applications folder
          3. Empty the Trash
          4. Reinstall Zing from this DMG
          5. Use the helper script to open it
          
          This ensures the icon cache is properly refreshed.
          EOF
      
      # Create DMG with signed app and helper files
      - name: Create DMG
        run: |
          # Create a temporary directory for DMG contents
          mkdir -p dmg_contents
          cp -r Zing.app dmg_contents/
          cp open-zing.command dmg_contents/
          cp HOW_TO_OPEN_ZING.md dmg_contents/
          cp INSTALL.md dmg_contents/
          
          # Create Applications folder symlink
          ln -s /Applications dmg_contents/
          
          # Create the DMG
          create-dmg \
            --volname "Zing" \
            --volicon "AppIcon.icns" \
            --window-pos 200 120 \
            --window-size 800 500 \
            --icon-size 100 \
            --icon "Zing.app" 200 190 \
            --icon "open-zing.command" 400 190 \
            --icon "Applications" 600 190 \
            --hide-extension "Zing.app" \
            --hide-extension "open-zing.command" \
            --hide-extension "HOW_TO_OPEN_ZING.md" \
            --hide-extension "INSTALL.md" \
            "Zing.dmg" \
            dmg_contents
      
      # Sign the DMG
      - name: Sign the DMG
        env:
          DEVELOPER_ID: ${{ secrets.APPLE_DEVELOPER_ID }}
        run: |
          /usr/bin/codesign --force --sign "$DEVELOPER_ID" Zing.dmg --verbose
            
      - name: Upload App Bundle
        uses: actions/upload-artifact@v4
        with:
          name: Zing.app
          path: Zing.app
          
      - name: Upload DMG
        uses: actions/upload-artifact@v4
        with:
          name: Zing.dmg
          path: Zing.dmg
          
      - name: Attach to Release
        uses: softprops/action-gh-release@v1
        with:
          files: Zing.dmg
